// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TLib/core/tsystem_log_msg.proto

#ifndef PROTOBUF_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto__INCLUDED
#define PROTOBUF_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "TLib/core/tsystem_time.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto();
void protobuf_AssignDesc_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto();
void protobuf_ShutdownFile_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto();

class LogMessage;

enum LogMessage_WarnLevel {
  LogMessage_WarnLevel_LOG = 0,
  LogMessage_WarnLevel_TRIVIAL = 1,
  LogMessage_WarnLevel_VITAL = 2,
  LogMessage_WarnLevel_LETHAL = 3
};
bool LogMessage_WarnLevel_IsValid(int value);
const LogMessage_WarnLevel LogMessage_WarnLevel_WarnLevel_MIN = LogMessage_WarnLevel_LOG;
const LogMessage_WarnLevel LogMessage_WarnLevel_WarnLevel_MAX = LogMessage_WarnLevel_LETHAL;
const int LogMessage_WarnLevel_WarnLevel_ARRAYSIZE = LogMessage_WarnLevel_WarnLevel_MAX + 1;

// ===================================================================

class LogMessage : public ::google::protobuf::MessageLite {
 public:
  LogMessage();
  virtual ~LogMessage();

  LogMessage(const LogMessage& from);

  inline LogMessage& operator=(const LogMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const LogMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LogMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LogMessage* other);

  // implements Message ----------------------------------------------

  LogMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LogMessage& from);
  void MergeFrom(const LogMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef LogMessage_WarnLevel WarnLevel;
  static const WarnLevel LOG = LogMessage_WarnLevel_LOG;
  static const WarnLevel TRIVIAL = LogMessage_WarnLevel_TRIVIAL;
  static const WarnLevel VITAL = LogMessage_WarnLevel_VITAL;
  static const WarnLevel LETHAL = LogMessage_WarnLevel_LETHAL;
  static inline bool WarnLevel_IsValid(int value) {
    return LogMessage_WarnLevel_IsValid(value);
  }
  static const WarnLevel WarnLevel_MIN =
    LogMessage_WarnLevel_WarnLevel_MIN;
  static const WarnLevel WarnLevel_MAX =
    LogMessage_WarnLevel_WarnLevel_MAX;
  static const int WarnLevel_ARRAYSIZE =
    LogMessage_WarnLevel_WarnLevel_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required uint32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // optional .Time timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline const ::Time& timestamp() const;
  inline ::Time* mutable_timestamp();
  inline ::Time* release_timestamp();
  inline void set_allocated_timestamp(::Time* timestamp);

  // optional .LogMessage.WarnLevel level = 3 [default = LOG];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::LogMessage_WarnLevel level() const;
  inline void set_level(::LogMessage_WarnLevel value);

  // required string key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:LogMessage)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::Time* timestamp_;
  ::google::protobuf::uint32 pid_;
  int level_;
  ::std::string* key_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static LogMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// LogMessage

// required uint32 pid = 1;
inline bool LogMessage::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMessage::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogMessage::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogMessage::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 LogMessage::pid() const {
  return pid_;
}
inline void LogMessage::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
}

// optional .Time timestamp = 2;
inline bool LogMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogMessage::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::Time::Clear();
  clear_has_timestamp();
}
inline const ::Time& LogMessage::timestamp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return timestamp_ != NULL ? *timestamp_ : *default_instance().timestamp_;
#else
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
#endif
}
inline ::Time* LogMessage::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::Time;
  return timestamp_;
}
inline ::Time* LogMessage::release_timestamp() {
  clear_has_timestamp();
  ::Time* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void LogMessage::set_allocated_timestamp(::Time* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
}

// optional .LogMessage.WarnLevel level = 3 [default = LOG];
inline bool LogMessage::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMessage::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogMessage::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogMessage::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::LogMessage_WarnLevel LogMessage::level() const {
  return static_cast< ::LogMessage_WarnLevel >(level_);
}
inline void LogMessage::set_level(::LogMessage_WarnLevel value) {
  assert(::LogMessage_WarnLevel_IsValid(value));
  set_has_level();
  level_ = value;
}

// required string key = 4;
inline bool LogMessage::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMessage::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogMessage::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogMessage::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& LogMessage::key() const {
  return *key_;
}
inline void LogMessage::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LogMessage::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LogMessage::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMessage::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* LogMessage::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogMessage::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string msg = 5;
inline bool LogMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogMessage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& LogMessage::msg() const {
  return *msg_;
}
inline void LogMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void LogMessage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void LogMessage::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* LogMessage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogMessage::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TLib_2fcore_2ftsystem_5flog_5fmsg_2eproto__INCLUDED
