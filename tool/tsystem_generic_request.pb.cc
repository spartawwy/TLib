// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TLib/tool/tsystem_generic_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TLib/tool/tsystem_generic_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto() {
  delete GenericRequest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_TLib_2fcore_2ftsystem_5freturn_5fcode_2eproto();
  ::protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5fparam_2eproto();
  GenericRequest::default_instance_ = new GenericRequest();
  GenericRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto_once_);
void protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto_once_,
                 &protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto {
  StaticDescriptorInitializer_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto() {
    protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto();
  }
} static_descriptor_initializer_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GenericRequest::kRequestIdFieldNumber;
const int GenericRequest::kAckFieldNumber;
const int GenericRequest::kReqNameFieldNumber;
const int GenericRequest::kReqArgsFieldNumber;
#endif  // !_MSC_VER

GenericRequest::GenericRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GenericRequest::InitAsDefaultInstance() {
}

GenericRequest::GenericRequest(const GenericRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GenericRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  ack_ = true;
  req_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenericRequest::~GenericRequest() {
  SharedDtor();
}

void GenericRequest::SharedDtor() {
  if (req_name_ != &::google::protobuf::internal::kEmptyString) {
    delete req_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GenericRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GenericRequest& GenericRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_TLib_2ftool_2ftsystem_5fgeneric_5frequest_2eproto();
#endif
  return *default_instance_;
}

GenericRequest* GenericRequest::default_instance_ = NULL;

GenericRequest* GenericRequest::New() const {
  return new GenericRequest;
}

void GenericRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    ack_ = true;
    if (has_req_name()) {
      if (req_name_ != &::google::protobuf::internal::kEmptyString) {
        req_name_->clear();
      }
    }
  }
  req_args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GenericRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ack;
        break;
      }

      // optional bool ack = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ack_)));
          set_has_ack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_req_name;
        break;
      }

      // required string req_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_req_args;
        break;
      }

      // repeated string req_args = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_req_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_req_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenericRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 request_id = 1 [default = 0];
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional bool ack = 2 [default = true];
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ack(), output);
  }

  // required string req_name = 3;
  if (has_req_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->req_name(), output);
  }

  // repeated string req_args = 4;
  for (int i = 0; i < this->req_args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->req_args(i), output);
  }

}

int GenericRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 request_id = 1 [default = 0];
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional bool ack = 2 [default = true];
    if (has_ack()) {
      total_size += 1 + 1;
    }

    // required string req_name = 3;
    if (has_req_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_name());
    }

  }
  // repeated string req_args = 4;
  total_size += 1 * this->req_args_size();
  for (int i = 0; i < this->req_args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->req_args(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenericRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GenericRequest*>(&from));
}

void GenericRequest::MergeFrom(const GenericRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  req_args_.MergeFrom(from.req_args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_ack()) {
      set_ack(from.ack());
    }
    if (from.has_req_name()) {
      set_req_name(from.req_name());
    }
  }
}

void GenericRequest::CopyFrom(const GenericRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GenericRequest::Swap(GenericRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(ack_, other->ack_);
    std::swap(req_name_, other->req_name_);
    req_args_.Swap(&other->req_args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GenericRequest::GetTypeName() const {
  return "GenericRequest";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
