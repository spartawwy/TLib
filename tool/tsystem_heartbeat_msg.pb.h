// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TLib/tool/tsystem_heartbeat_msg.proto

#ifndef PROTOBUF_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto__INCLUDED
#define PROTOBUF_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "TLib/core/tsystem_time.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto();
void protobuf_AssignDesc_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto();
void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto();

class Heartbeat;

enum Heartbeat_Status {
  Heartbeat_Status_OFF_LINE = 0,
  Heartbeat_Status_INITIATE = 1,
  Heartbeat_Status_ON_LINE = 2,
  Heartbeat_Status_PANIC = 3
};
bool Heartbeat_Status_IsValid(int value);
const Heartbeat_Status Heartbeat_Status_Status_MIN = Heartbeat_Status_OFF_LINE;
const Heartbeat_Status Heartbeat_Status_Status_MAX = Heartbeat_Status_PANIC;
const int Heartbeat_Status_Status_ARRAYSIZE = Heartbeat_Status_Status_MAX + 1;

// ===================================================================

class Heartbeat : public ::google::protobuf::MessageLite {
 public:
  Heartbeat();
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  static const Heartbeat& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Heartbeat* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Heartbeat* other);

  // implements Message ----------------------------------------------

  Heartbeat* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Heartbeat_Status Status;
  static const Status OFF_LINE = Heartbeat_Status_OFF_LINE;
  static const Status INITIATE = Heartbeat_Status_INITIATE;
  static const Status ON_LINE = Heartbeat_Status_ON_LINE;
  static const Status PANIC = Heartbeat_Status_PANIC;
  static inline bool Status_IsValid(int value) {
    return Heartbeat_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Heartbeat_Status_Status_MIN;
  static const Status Status_MAX =
    Heartbeat_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Heartbeat_Status_Status_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required uint32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // optional .Time timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline const ::Time& timestamp() const;
  inline ::Time* mutable_timestamp();
  inline ::Time* release_timestamp();
  inline void set_allocated_timestamp(::Time* timestamp);

  // optional .Heartbeat.Status status = 3 [default = OFF_LINE];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::Heartbeat_Status status() const;
  inline void set_status(::Heartbeat_Status value);

  // optional string info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:Heartbeat)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_info();
  inline void clear_has_info();

  ::Time* timestamp_;
  ::google::protobuf::uint32 pid_;
  int status_;
  ::std::string* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Heartbeat* default_instance_;
};
// ===================================================================


// ===================================================================

// Heartbeat

// required uint32 pid = 1;
inline bool Heartbeat::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Heartbeat::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Heartbeat::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Heartbeat::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 Heartbeat::pid() const {
  return pid_;
}
inline void Heartbeat::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
}

// optional .Time timestamp = 2;
inline bool Heartbeat::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Heartbeat::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Heartbeat::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Heartbeat::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::Time::Clear();
  clear_has_timestamp();
}
inline const ::Time& Heartbeat::timestamp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return timestamp_ != NULL ? *timestamp_ : *default_instance().timestamp_;
#else
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
#endif
}
inline ::Time* Heartbeat::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::Time;
  return timestamp_;
}
inline ::Time* Heartbeat::release_timestamp() {
  clear_has_timestamp();
  ::Time* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Heartbeat::set_allocated_timestamp(::Time* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
}

// optional .Heartbeat.Status status = 3 [default = OFF_LINE];
inline bool Heartbeat::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Heartbeat::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Heartbeat::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Heartbeat::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Heartbeat_Status Heartbeat::status() const {
  return static_cast< ::Heartbeat_Status >(status_);
}
inline void Heartbeat::set_status(::Heartbeat_Status value) {
  assert(::Heartbeat_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string info = 4;
inline bool Heartbeat::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Heartbeat::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Heartbeat::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Heartbeat::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& Heartbeat::info() const {
  return *info_;
}
inline void Heartbeat::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void Heartbeat::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void Heartbeat::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Heartbeat::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* Heartbeat::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Heartbeat::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TLib_2ftool_2ftsystem_5fheartbeat_5fmsg_2eproto__INCLUDED
