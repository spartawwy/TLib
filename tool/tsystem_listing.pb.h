// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TLib/tool/tsystem_listing.proto

#ifndef PROTOBUF_TLib_2ftool_2ftsystem_5flisting_2eproto__INCLUDED
#define PROTOBUF_TLib_2ftool_2ftsystem_5flisting_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "TLib/tool/tsystem_generic_param.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5flisting_2eproto();
void protobuf_AssignDesc_TLib_2ftool_2ftsystem_5flisting_2eproto();
void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5flisting_2eproto();

class ListingVariable;
class Listing;

// ===================================================================

class ListingVariable : public ::google::protobuf::MessageLite {
 public:
  ListingVariable();
  virtual ~ListingVariable();

  ListingVariable(const ListingVariable& from);

  inline ListingVariable& operator=(const ListingVariable& from) {
    CopyFrom(from);
    return *this;
  }

  static const ListingVariable& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ListingVariable* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ListingVariable* other);

  // implements Message ----------------------------------------------

  ListingVariable* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ListingVariable& from);
  void MergeFrom(const ListingVariable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .GenericParam value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::GenericParam& value() const;
  inline ::GenericParam* mutable_value();
  inline ::GenericParam* release_value();
  inline void set_allocated_value(::GenericParam* value);

  // @@protoc_insertion_point(class_scope:ListingVariable)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* name_;
  ::GenericParam* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5flisting_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5flisting_2eproto();
  #endif
  friend void protobuf_AssignDesc_TLib_2ftool_2ftsystem_5flisting_2eproto();
  friend void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5flisting_2eproto();

  void InitAsDefaultInstance();
  static ListingVariable* default_instance_;
};
// -------------------------------------------------------------------

class Listing : public ::google::protobuf::MessageLite {
 public:
  Listing();
  virtual ~Listing();

  Listing(const Listing& from);

  inline Listing& operator=(const Listing& from) {
    CopyFrom(from);
    return *this;
  }

  static const Listing& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Listing* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Listing* other);

  // implements Message ----------------------------------------------

  Listing* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Listing& from);
  void MergeFrom(const Listing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .ListingVariable vars = 2;
  inline int vars_size() const;
  inline void clear_vars();
  static const int kVarsFieldNumber = 2;
  inline const ::ListingVariable& vars(int index) const;
  inline ::ListingVariable* mutable_vars(int index);
  inline ::ListingVariable* add_vars();
  inline const ::google::protobuf::RepeatedPtrField< ::ListingVariable >&
      vars() const;
  inline ::google::protobuf::RepeatedPtrField< ::ListingVariable >*
      mutable_vars();

  // @@protoc_insertion_point(class_scope:Listing)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::ListingVariable > vars_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5flisting_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5flisting_2eproto();
  #endif
  friend void protobuf_AssignDesc_TLib_2ftool_2ftsystem_5flisting_2eproto();
  friend void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5flisting_2eproto();

  void InitAsDefaultInstance();
  static Listing* default_instance_;
};
// ===================================================================


// ===================================================================

// ListingVariable

// required string name = 1;
inline bool ListingVariable::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListingVariable::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListingVariable::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListingVariable::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ListingVariable::name() const {
  return *name_;
}
inline void ListingVariable::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ListingVariable::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ListingVariable::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListingVariable::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ListingVariable::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListingVariable::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .GenericParam value = 2;
inline bool ListingVariable::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListingVariable::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListingVariable::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListingVariable::clear_value() {
  if (value_ != NULL) value_->::GenericParam::Clear();
  clear_has_value();
}
inline const ::GenericParam& ListingVariable::value() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return value_ != NULL ? *value_ : *default_instance().value_;
#else
  return value_ != NULL ? *value_ : *default_instance_->value_;
#endif
}
inline ::GenericParam* ListingVariable::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::GenericParam;
  return value_;
}
inline ::GenericParam* ListingVariable::release_value() {
  clear_has_value();
  ::GenericParam* temp = value_;
  value_ = NULL;
  return temp;
}
inline void ListingVariable::set_allocated_value(::GenericParam* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
}

// -------------------------------------------------------------------

// Listing

// required string name = 1;
inline bool Listing::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Listing::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Listing::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Listing::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Listing::name() const {
  return *name_;
}
inline void Listing::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Listing::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Listing::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Listing::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Listing::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Listing::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ListingVariable vars = 2;
inline int Listing::vars_size() const {
  return vars_.size();
}
inline void Listing::clear_vars() {
  vars_.Clear();
}
inline const ::ListingVariable& Listing::vars(int index) const {
  return vars_.Get(index);
}
inline ::ListingVariable* Listing::mutable_vars(int index) {
  return vars_.Mutable(index);
}
inline ::ListingVariable* Listing::add_vars() {
  return vars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ListingVariable >&
Listing::vars() const {
  return vars_;
}
inline ::google::protobuf::RepeatedPtrField< ::ListingVariable >*
Listing::mutable_vars() {
  return &vars_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TLib_2ftool_2ftsystem_5flisting_2eproto__INCLUDED
