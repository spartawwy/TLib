// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TLib/tool/tsystem_topic_request.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TLib/tool/tsystem_topic_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto() {
  delete TopicRequest::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TopicRequest::default_instance_ = new TopicRequest();
  TopicRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto_once_);
void protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto_once_,
                 &protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto {
  StaticDescriptorInitializer_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto() {
    protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto();
  }
} static_descriptor_initializer_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto_;
#endif

// ===================================================================

bool TopicRequest_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TopicRequest_Type TopicRequest::Subscribe;
const TopicRequest_Type TopicRequest::Request;
const TopicRequest_Type TopicRequest::Unsubscribe;
const TopicRequest_Type TopicRequest::Type_MIN;
const TopicRequest_Type TopicRequest::Type_MAX;
const int TopicRequest::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TopicRequest::kRequestIdFieldNumber;
const int TopicRequest::kTopicIdFieldNumber;
const int TopicRequest::kTypeFieldNumber;
const int TopicRequest::kKeysFieldNumber;
const int TopicRequest::kAllAvailableFieldNumber;
const int TopicRequest::kAddKeyFieldNumber;
const int TopicRequest::kDataPosFieldNumber;
#endif  // !_MSC_VER

TopicRequest::TopicRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TopicRequest::InitAsDefaultInstance() {
}

TopicRequest::TopicRequest(const TopicRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TopicRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  topic_id_ = 0;
  type_ = 0;
  all_available_ = false;
  add_key_ = false;
  data_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicRequest::~TopicRequest() {
  SharedDtor();
}

void TopicRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TopicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TopicRequest& TopicRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto();
#endif
  return *default_instance_;
}

TopicRequest* TopicRequest::default_instance_ = NULL;

TopicRequest* TopicRequest::New() const {
  return new TopicRequest;
}

void TopicRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = 0u;
    topic_id_ = 0;
    type_ = 0;
    all_available_ = false;
    add_key_ = false;
    data_pos_ = 0;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_topic_id;
        break;
      }

      // required int32 topic_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_topic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topic_id_)));
          set_has_topic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .TopicRequest.Type type = 3 [default = Subscribe];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TopicRequest_Type_IsValid(value)) {
            set_type(static_cast< ::TopicRequest_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        break;
      }

      // repeated string keys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_keys;
        if (input->ExpectTag(40)) goto parse_all_available;
        break;
      }

      // optional bool all_available = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_available_)));
          set_has_all_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_add_key;
        break;
      }

      // optional bool add_key = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_key_)));
          set_has_add_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_data_pos;
        break;
      }

      // optional int32 data_pos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_pos_)));
          set_has_data_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required int32 topic_id = 2;
  if (has_topic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->topic_id(), output);
  }

  // optional .TopicRequest.Type type = 3 [default = Subscribe];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated string keys = 4;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->keys(i), output);
  }

  // optional bool all_available = 5 [default = false];
  if (has_all_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->all_available(), output);
  }

  // optional bool add_key = 6 [default = false];
  if (has_add_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->add_key(), output);
  }

  // optional int32 data_pos = 7;
  if (has_data_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->data_pos(), output);
  }

}

int TopicRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // required int32 topic_id = 2;
    if (has_topic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topic_id());
    }

    // optional .TopicRequest.Type type = 3 [default = Subscribe];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool all_available = 5 [default = false];
    if (has_all_available()) {
      total_size += 1 + 1;
    }

    // optional bool add_key = 6 [default = false];
    if (has_add_key()) {
      total_size += 1 + 1;
    }

    // optional int32 data_pos = 7;
    if (has_data_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_pos());
    }

  }
  // repeated string keys = 4;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TopicRequest*>(&from));
}

void TopicRequest::MergeFrom(const TopicRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_topic_id()) {
      set_topic_id(from.topic_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_all_available()) {
      set_all_available(from.all_available());
    }
    if (from.has_add_key()) {
      set_add_key(from.add_key());
    }
    if (from.has_data_pos()) {
      set_data_pos(from.data_pos());
    }
  }
}

void TopicRequest::CopyFrom(const TopicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TopicRequest::Swap(TopicRequest* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(topic_id_, other->topic_id_);
    std::swap(type_, other->type_);
    keys_.Swap(&other->keys_);
    std::swap(all_available_, other->all_available_);
    std::swap(add_key_, other->add_key_);
    std::swap(data_pos_, other->data_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TopicRequest::GetTypeName() const {
  return "TopicRequest";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
