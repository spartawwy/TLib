// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TLib/tool/tsystem_rational_number.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TLib/tool/tsystem_rational_number.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto() {
  delete RationalNumber::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RationalNumber::default_instance_ = new RationalNumber();
  RationalNumber::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto_once_);
void protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto_once_,
                 &protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto {
  StaticDescriptorInitializer_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto() {
    protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto();
  }
} static_descriptor_initializer_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RationalNumber::kRFieldNumber;
const int RationalNumber::kNFieldNumber;
const int RationalNumber::kDFieldNumber;
#endif  // !_MSC_VER

RationalNumber::RationalNumber()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RationalNumber::InitAsDefaultInstance() {
}

RationalNumber::RationalNumber(const RationalNumber& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RationalNumber::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  n_ = 0;
  d_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RationalNumber::~RationalNumber() {
  SharedDtor();
}

void RationalNumber::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RationalNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RationalNumber& RationalNumber::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_TLib_2ftool_2ftsystem_5frational_5fnumber_2eproto();
#endif
  return *default_instance_;
}

RationalNumber* RationalNumber::default_instance_ = NULL;

RationalNumber* RationalNumber::New() const {
  return new RationalNumber;
}

void RationalNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
    n_ = 0;
    d_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RationalNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 r = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_n;
        break;
      }

      // required int32 n = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_d;
        break;
      }

      // required int32 d = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RationalNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 r = 1 [default = 0];
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // required int32 n = 2;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->n(), output);
  }

  // required int32 d = 3;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->d(), output);
  }

}

int RationalNumber::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 r = 1 [default = 0];
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // required int32 n = 2;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n());
    }

    // required int32 d = 3;
    if (has_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->d());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RationalNumber::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RationalNumber*>(&from));
}

void RationalNumber::MergeFrom(const RationalNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
  }
}

void RationalNumber::CopyFrom(const RationalNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RationalNumber::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void RationalNumber::Swap(RationalNumber* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(n_, other->n_);
    std::swap(d_, other->d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RationalNumber::GetTypeName() const {
  return "RationalNumber";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
