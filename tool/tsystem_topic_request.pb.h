// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TLib/tool/tsystem_topic_request.proto

#ifndef PROTOBUF_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto__INCLUDED
#define PROTOBUF_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto();
void protobuf_AssignDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto();
void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto();

class TopicRequest;

enum TopicRequest_Type {
  TopicRequest_Type_Subscribe = 0,
  TopicRequest_Type_Request = 1,
  TopicRequest_Type_Unsubscribe = 2
};
bool TopicRequest_Type_IsValid(int value);
const TopicRequest_Type TopicRequest_Type_Type_MIN = TopicRequest_Type_Subscribe;
const TopicRequest_Type TopicRequest_Type_Type_MAX = TopicRequest_Type_Unsubscribe;
const int TopicRequest_Type_Type_ARRAYSIZE = TopicRequest_Type_Type_MAX + 1;

// ===================================================================

class TopicRequest : public ::google::protobuf::MessageLite {
 public:
  TopicRequest();
  virtual ~TopicRequest();

  TopicRequest(const TopicRequest& from);

  inline TopicRequest& operator=(const TopicRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const TopicRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TopicRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TopicRequest* other);

  // implements Message ----------------------------------------------

  TopicRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TopicRequest& from);
  void MergeFrom(const TopicRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef TopicRequest_Type Type;
  static const Type Subscribe = TopicRequest_Type_Subscribe;
  static const Type Request = TopicRequest_Type_Request;
  static const Type Unsubscribe = TopicRequest_Type_Unsubscribe;
  static inline bool Type_IsValid(int value) {
    return TopicRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    TopicRequest_Type_Type_MIN;
  static const Type Type_MAX =
    TopicRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    TopicRequest_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required uint32 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::uint32 request_id() const;
  inline void set_request_id(::google::protobuf::uint32 value);

  // required int32 topic_id = 2;
  inline bool has_topic_id() const;
  inline void clear_topic_id();
  static const int kTopicIdFieldNumber = 2;
  inline ::google::protobuf::int32 topic_id() const;
  inline void set_topic_id(::google::protobuf::int32 value);

  // optional .TopicRequest.Type type = 3 [default = Subscribe];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::TopicRequest_Type type() const;
  inline void set_type(::TopicRequest_Type value);

  // repeated string keys = 4;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 4;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const char* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // optional bool all_available = 5 [default = false];
  inline bool has_all_available() const;
  inline void clear_all_available();
  static const int kAllAvailableFieldNumber = 5;
  inline bool all_available() const;
  inline void set_all_available(bool value);

  // optional bool add_key = 6 [default = false];
  inline bool has_add_key() const;
  inline void clear_add_key();
  static const int kAddKeyFieldNumber = 6;
  inline bool add_key() const;
  inline void set_add_key(bool value);

  // optional int32 data_pos = 7;
  inline bool has_data_pos() const;
  inline void clear_data_pos();
  static const int kDataPosFieldNumber = 7;
  inline ::google::protobuf::int32 data_pos() const;
  inline void set_data_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TopicRequest)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_topic_id();
  inline void clear_has_topic_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_all_available();
  inline void clear_has_all_available();
  inline void set_has_add_key();
  inline void clear_has_add_key();
  inline void set_has_data_pos();
  inline void clear_has_data_pos();

  ::google::protobuf::uint32 request_id_;
  ::google::protobuf::int32 topic_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  int type_;
  bool all_available_;
  bool add_key_;
  ::google::protobuf::int32 data_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto();
  #endif
  friend void protobuf_AssignDesc_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto();
  friend void protobuf_ShutdownFile_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto();

  void InitAsDefaultInstance();
  static TopicRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// TopicRequest

// required uint32 request_id = 1;
inline bool TopicRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
inline ::google::protobuf::uint32 TopicRequest::request_id() const {
  return request_id_;
}
inline void TopicRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
}

// required int32 topic_id = 2;
inline bool TopicRequest::has_topic_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicRequest::set_has_topic_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicRequest::clear_has_topic_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicRequest::clear_topic_id() {
  topic_id_ = 0;
  clear_has_topic_id();
}
inline ::google::protobuf::int32 TopicRequest::topic_id() const {
  return topic_id_;
}
inline void TopicRequest::set_topic_id(::google::protobuf::int32 value) {
  set_has_topic_id();
  topic_id_ = value;
}

// optional .TopicRequest.Type type = 3 [default = Subscribe];
inline bool TopicRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopicRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopicRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopicRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::TopicRequest_Type TopicRequest::type() const {
  return static_cast< ::TopicRequest_Type >(type_);
}
inline void TopicRequest::set_type(::TopicRequest_Type value) {
  assert(::TopicRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated string keys = 4;
inline int TopicRequest::keys_size() const {
  return keys_.size();
}
inline void TopicRequest::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& TopicRequest::keys(int index) const {
  return keys_.Get(index);
}
inline ::std::string* TopicRequest::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline void TopicRequest::set_keys(int index, const ::std::string& value) {
  keys_.Mutable(index)->assign(value);
}
inline void TopicRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
}
inline void TopicRequest::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicRequest::add_keys() {
  return keys_.Add();
}
inline void TopicRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
}
inline void TopicRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
}
inline void TopicRequest::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicRequest::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicRequest::mutable_keys() {
  return &keys_;
}

// optional bool all_available = 5 [default = false];
inline bool TopicRequest::has_all_available() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopicRequest::set_has_all_available() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopicRequest::clear_has_all_available() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopicRequest::clear_all_available() {
  all_available_ = false;
  clear_has_all_available();
}
inline bool TopicRequest::all_available() const {
  return all_available_;
}
inline void TopicRequest::set_all_available(bool value) {
  set_has_all_available();
  all_available_ = value;
}

// optional bool add_key = 6 [default = false];
inline bool TopicRequest::has_add_key() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopicRequest::set_has_add_key() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopicRequest::clear_has_add_key() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopicRequest::clear_add_key() {
  add_key_ = false;
  clear_has_add_key();
}
inline bool TopicRequest::add_key() const {
  return add_key_;
}
inline void TopicRequest::set_add_key(bool value) {
  set_has_add_key();
  add_key_ = value;
}

// optional int32 data_pos = 7;
inline bool TopicRequest::has_data_pos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopicRequest::set_has_data_pos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopicRequest::clear_has_data_pos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopicRequest::clear_data_pos() {
  data_pos_ = 0;
  clear_has_data_pos();
}
inline ::google::protobuf::int32 TopicRequest::data_pos() const {
  return data_pos_;
}
inline void TopicRequest::set_data_pos(::google::protobuf::int32 value) {
  set_has_data_pos();
  data_pos_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TLib_2ftool_2ftsystem_5ftopic_5frequest_2eproto__INCLUDED
